// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace KGSWebAGVSystemAPI.Models;

public partial class WebAGVSystemContext : DbContext
{
    public WebAGVSystemContext(DbContextOptions<WebAGVSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Agvinfo> Agvinfos { get; set; }

    public virtual DbSet<AgvremoteSetting> AgvremoteSettings { get; set; }

    public virtual DbSet<AlarmLog> AlarmLogs { get; set; }

    public virtual DbSet<BatterySet> BatterySets { get; set; }

    public virtual DbSet<ExecutingSkdTask> ExecutingSkdTasks { get; set; }

    public virtual DbSet<ExecutingTask> ExecutingTasks { get; set; }

    public virtual DbSet<InstrumentMeasureResult> InstrumentMeasureResults { get; set; }

    public virtual DbSet<MapComparison> MapComparisons { get; set; }

    public virtual DbSet<MeasureInfo> MeasureInfos { get; set; }

    public virtual DbSet<OccurringAlarm> OccurringAlarms { get; set; }

    public virtual DbSet<PathInfo> PathInfos { get; set; }

    public virtual DbSet<Pmhistory> Pmhistories { get; set; }

    public virtual DbSet<Pmsetting> Pmsettings { get; set; }

    public virtual DbSet<ProductInfo> ProductInfos { get; set; }

    public virtual DbSet<RunStatusChange> RunStatusChanges { get; set; }

    public virtual DbSet<SkdTask> SkdTasks { get; set; }

    public virtual DbSet<SmsphoneNo> SmsphoneNos { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TrackHistory> TrackHistories { get; set; }

    public virtual DbSet<TrafficTask> TrafficTasks { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    public virtual DbSet<UserInfo> UserInfos { get; set; }

    public virtual DbSet<Ver> Vers { get; set; }

    public virtual DbSet<VmslogicSetting> VmslogicSettings { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Agvinfo>(entity =>
        {
            entity.HasKey(e => e.Agvid);

            entity.ToTable("AGVInfo");

            entity.Property(e => e.Agvid)
                .ValueGeneratedNever()
                .HasColumnName("AGVID");
            entity.Property(e => e.AgvconnectStatus).HasColumnName("AGVConnectStatus");
            entity.Property(e => e.AgvmainStatus).HasColumnName("AGVMainStatus");
            entity.Property(e => e.Agvmode).HasColumnName("AGVMode");
            entity.Property(e => e.Agvname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("AGVName");
            entity.Property(e => e.AgvsubStatus).HasColumnName("AGVSubStatus");
            entity.Property(e => e.AlarmDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Cstid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CSTID");
            entity.Property(e => e.DoTaskName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.E82vehicleState)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("E82VehicleState");
        });

        modelBuilder.Entity<AgvremoteSetting>(entity =>
        {
            entity.HasKey(e => e.Agvid).HasName("PK__AGVRemot__FCDD6E5503B81352");

            entity.ToTable("AGVRemoteSetting");

            entity.Property(e => e.Agvid)
                .ValueGeneratedNever()
                .HasColumnName("AGVID");
        });

        modelBuilder.Entity<AlarmLog>(entity =>
        {
            entity.HasKey(e => new { e.OccuredDate, e.AlarmCode });

            entity.ToTable("AlarmLog");

            entity.Property(e => e.OccuredDate).HasColumnType("datetime");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.FinishDate).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Opid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OPID");
            entity.Property(e => e.Owner)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BatterySet>(entity =>
        {
            entity.HasKey(e => e.Agvid);

            entity.ToTable("BatterySet");

            entity.Property(e => e.Agvid)
                .ValueGeneratedNever()
                .HasColumnName("AGVID");
        });

        modelBuilder.Entity<ExecutingSkdTask>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__Executin__6B4108E64976DFB4");

            entity.ToTable("ExecutingSkdTask");

            entity.Property(e => e.CommandId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.Bay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinishedPoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MeasurePoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatrolPoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleTime)
                .HasColumnType("datetime")
                .HasColumnName("Schedule_Time");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExecutingTask>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("ExecutingTask");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcquireTime).HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.AssignUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cstid)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CSTID");
            entity.Property(e => e.Cstlayers).HasColumnName("CSTLayers");
            entity.Property(e => e.Csttype).HasColumnName("CSTType");
            entity.Property(e => e.DepositTime).HasColumnType("datetime");
            entity.Property(e => e.ExeVehicleId).HasColumnName("ExeVehicleID");
            entity.Property(e => e.FromStation)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveTime)
                .HasColumnType("datetime")
                .HasColumnName("Receive_Time");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.ToStation)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InstrumentMeasureResult>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InstrumentMeasureResult");

            entity.Property(e => e.Acetone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CommandId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.Decibel)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles1)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles2)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles3)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles4)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles5)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DustParticles6)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Humidity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Illuminance)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ipa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IPA");
            entity.Property(e => e.Pid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PID");
            entity.Property(e => e.Position)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Temperature)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Time)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tvoc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TVOC");
        });

        modelBuilder.Entity<MapComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MapComparison");

            entity.Property(e => e.Agvid).HasColumnName("AGVID");
        });

        modelBuilder.Entity<MeasureInfo>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__MeasureI__6B4108E6B9478A29");

            entity.ToTable("MeasureInfo");

            entity.Property(e => e.CommandId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.Bay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Points)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveTime)
                .HasColumnType("datetime")
                .HasColumnName("Receive_Time");
            entity.Property(e => e.SuccessPoints)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OccurringAlarm>(entity =>
        {
            entity.HasKey(e => new { e.OccuredDate, e.AlarmCode });

            entity.ToTable("OccurringAlarm");

            entity.Property(e => e.OccuredDate).HasColumnType("datetime");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Location)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Opid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OPID");
            entity.Property(e => e.Owner)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PathInfo>(entity =>
        {
            entity.HasKey(e => new { e.ChangeTime, e.Agvid }).HasName("PK__PathInfo__DBD97340B9CB16C9");

            entity.ToTable("PathInfo");

            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
        });

        modelBuilder.Entity<Pmhistory>(entity =>
        {
            entity.HasKey(e => new { e.Agvid, e.Pmdate }).HasName("PK__PMHistor__BF79F47E61A62920");

            entity.ToTable("PMHistory");

            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.Pmdate)
                .HasColumnType("datetime")
                .HasColumnName("PMDate");
            entity.Property(e => e.Comment).HasColumnType("text");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pmsetting>(entity =>
        {
            entity.HasKey(e => e.Agvid).HasName("PK__PMSettin__FCDD6E55968CC960");

            entity.ToTable("PMSetting");

            entity.Property(e => e.Agvid)
                .ValueGeneratedNever()
                .HasColumnName("AGVID");
            entity.Property(e => e.Pmcount).HasColumnName("PMCount");
        });

        modelBuilder.Entity<ProductInfo>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CommandId });

            entity.ToTable("ProductInfo");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.CommandId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.Frame)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InRackLdtime)
                .HasColumnType("datetime")
                .HasColumnName("InRackLDTime");
            entity.Property(e => e.LayerNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LotId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LotID");
            entity.Property(e => e.OutRackOpid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OutRackOPID");
            entity.Property(e => e.OutRackUldtime)
                .HasColumnType("datetime")
                .HasColumnName("OutRackULDTime");
            entity.Property(e => e.OvenLdtime)
                .HasColumnType("datetime")
                .HasColumnName("OvenLDTime");
            entity.Property(e => e.OvenUldtime)
                .HasColumnType("datetime")
                .HasColumnName("OvenULDTime");
            entity.Property(e => e.PartId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PartID");
            entity.Property(e => e.ReceiveTime)
                .HasColumnType("datetime")
                .HasColumnName("Receive_TIme");
            entity.Property(e => e.RecipeId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RecipeID");
            entity.Property(e => e.SerialId)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("SerialID");
            entity.Property(e => e.Stamp)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RunStatusChange>(entity =>
        {
            entity.HasKey(e => new { e.ChangeTime, e.Agvid });

            entity.ToTable("RunStatusChange");

            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.AgvmainStatus).HasColumnName("AGVMainStatus");
        });

        modelBuilder.Entity<SkdTask>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__SkdTask__6B4108E64876C6B2");

            entity.ToTable("SkdTask");

            entity.Property(e => e.CommandId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.Bay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.FailedPoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MeasurePoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatrolPoints)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleTime)
                .HasColumnType("datetime")
                .HasColumnName("Schedule_Time");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SmsphoneNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SMSPhoneNo");

            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("Task");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcquireTime).HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
            entity.Property(e => e.AssignUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CancelUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cstid)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CSTID");
            entity.Property(e => e.Cstlayers).HasColumnName("CSTLayers");
            entity.Property(e => e.Csttype).HasColumnName("CSTType");
            entity.Property(e => e.DepositTime).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.ExeVehicleId).HasColumnName("ExeVehicleID");
            entity.Property(e => e.FailReason).HasColumnType("text");
            entity.Property(e => e.FromStation)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveTime)
                .HasColumnType("datetime")
                .HasColumnName("Receive_Time");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.ToStation)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TotalTime)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TrackHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecordTime, e.Agvid });

            entity.ToTable("TrackHistory");

            entity.Property(e => e.RecordTime).HasColumnType("datetime");
            entity.Property(e => e.Agvid).HasColumnName("AGVID");
        });

        modelBuilder.Entity<TrafficTask>(entity =>
        {
            entity.HasKey(e => e.Agvid);

            entity.ToTable("TrafficTask");

            entity.Property(e => e.Agvid)
                .ValueGeneratedNever()
                .HasColumnName("AGVID");
            entity.Property(e => e.BookingPath)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CrossAgvid).HasColumnName("CrossAGVID");
            entity.Property(e => e.CrossPoint)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FullPath)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.InvolvePoint)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Message).IsUnicode(false);
            entity.Property(e => e.MessageCh)
                .IsUnicode(false)
                .HasColumnName("MessageCH");
            entity.Property(e => e.ShortPath)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.StartPos)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TargetPos)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.HasKey(e => e.UserGroup1);

            entity.ToTable("UserGroup");

            entity.Property(e => e.UserGroup1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserGroup");
            entity.Property(e => e.Functions)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserInfo>(entity =>
        {
            entity.HasKey(e => e.UserName);

            entity.ToTable("UserInfo");

            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserGroup)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserPassword)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Ver>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ver");

            entity.Property(e => e.Version)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("version");
        });

        modelBuilder.Entity<VmslogicSetting>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VMSLogicSetting");

            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}